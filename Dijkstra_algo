class ShortestPath
{
    static int V=9;
    int index(int dist[],Boolean b[])
    {
        int min=Integer.MAX_VALUE;
        int inde=-1;
        for(int i=0;i<V;i++)
        {
            if(b[i]==false && dist[i]<=min)
            {
                min=dist[i];
                inde=i;
            }
        }
        return inde;
    }
    
    
    void dijkstra(int graph[][],int src)
    {
        int dist[]=new int[V];
        Boolean b[]=new Boolean[V];
        for(int i=0;i<V;i++)
        {
            b[i]=false;
            dist[i]=Integer.MAX_VALUE;
            
        }
        dist[0]=0;
        for(int j=0;j<V-1;j++)
        {
            int r=index(dist,b);
            b[j]=true;


            for(int v=0;v<V;v++)
            {
                if(!b[v]&&graph[r][v]!=0 &&dist[r]!=Integer.MAX_VALUE && dist[r]+graph[r][v]<dist[v] )
                {
                    dist[v]=dist[r]+graph[r][v];
                }
            }
            
        }
         print(dist, V); 
    }
    void print(int dist[],int n)
    {
         System.out.println("Vertex   Distance from Source"); 
        for (int i = 0; i < V; i++) 
            System.out.println(i + " tt " + dist[i]); 
    }
}


public class Main
{
	public static void main(String[] args) {
		int graph[][] = new int[][] { { 0, 4, 0, 0, 0, 0, 0, 8, 0 }, 
									{ 4, 0, 8, 0, 0, 0, 0, 11, 0 }, 
									{ 0, 8, 0, 7, 0, 4, 0, 0, 2 }, 
									{ 0, 0, 7, 0, 9, 14, 0, 0, 0 }, 
									{ 0, 0, 0, 9, 0, 10, 0, 0, 0 }, 
									{ 0, 0, 4, 14, 10, 0, 2, 0, 0 }, 
									{ 0, 0, 0, 0, 0, 2, 0, 1, 6 }, 
									{ 8, 11, 0, 0, 0, 0, 1, 0, 7 }, 
									{ 0, 0, 2, 0, 0, 0, 6, 7, 0 } }; 
		ShortestPath t = new ShortestPath(); 
		t.dijkstra(graph, 0); 
	}
}
